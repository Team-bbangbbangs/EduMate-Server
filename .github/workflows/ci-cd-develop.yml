name: CI/CD - Build and Deploy to EC2

on:
  push:
    branches:
      - develop
      - main

concurrency:
  group: ci-cd-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 소스 체크아웃
        uses: actions/checkout@v4

      - name: JDK 21 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Gradle 캐시 구성
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: application.yml 설정
        run: |
          mkdir -p src/main/resources
          if [ "${{ github.ref }}" == "refs/heads/prod" ]; then
            echo "${{ secrets.APPLICATION_PROD_YML }}" > src/main/resources/application-prod.yml
          else
            echo "${{ secrets.APPLICATION_DEV_YML }}" > src/main/resources/application-dev.yml
          fi
        shell: bash

      - name: Gradle 빌드
        run: ./gradlew clean build --no-daemon

      - name: DockerHub 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 도커 이미지 태그 설정
        id: set_tag
        run: |
          if [ "${{ github.ref_name }}" = "develop" ]; then
            echo "TAG=dev-latest" >> $GITHUB_ENV
          else
            echo "TAG=prod-latest" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Docker Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/edumate:${{ env.TAG }}
          build-args: |
            JAR_FILE=build/libs/app.jar
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    env:
      EC2_HOST: ${{ github.ref_name == 'develop' && secrets.DEV_EC2_HOST || secrets.PROD_EC2_HOST }}
      EC2_USER: ${{ github.ref_name == 'develop' && secrets.DEV_EC2_USER || secrets.PROD_EC2_USER }}
      EC2_SSH_KEY: ${{ github.ref_name == 'develop' && secrets.DEV_EC2_SSH_KEY || secrets.PROD_EC2_SSH_KEY }}
      DOCKER_IMAGE: ${{ github.ref_name == 'develop' && format('{0}/edumate:dev-latest', secrets.DOCKER_USERNAME) || format('{0}/edumate:prod-latest', secrets.DOCKER_USERNAME) }}
      SPRING_PROFILES_ACTIVE: ${{ github.ref_name == 'develop' && 'dev' || 'prod' }}

    steps:
      - name: EC2에 SSH 접속 후 배포
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            set -e
            
            # Docker Hub 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # 최신 docker-compose.yml 받아오기
            curl -fsSL \
              https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker-compose.yml \
              -o docker-compose.yml

            # 기존 컨테이너 중단 및 이미지 정리
            if [ -f "docker-compose.yml" ]; then
              sudo docker-compose down
            fi
            sudo docker image prune -f
            
            # 최신 이미지 Pull
            sudo docker pull ${{ env.DOCKER_IMAGE }}
            
            # docker-compose 실행
            sudo DOCKER_IMAGE=${{ env.DOCKER_IMAGE }} SPRING_PROFILES_ACTIVE=${{ env.SPRING_PROFILES_ACTIVE }} \
              docker-compose up -d --force-recreate --remove-orphans